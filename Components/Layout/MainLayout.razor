@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<head>
    <style>
        body {
            background-color: #FAFAFA;
        }
    </style>
</head>

<div class="page">
    <!-- Main Container using Flexbox -->
    <div style="display: flex;align-items:center;justify-content:center; height: 100vh;">
        <!-- Navigation Menu (Conditional Rendering) -->
        @if (ShouldDisplayNavMenu())
        {
           @*  <div class="justify-content-center" style="max-width:1200px; min-height:100%;display:contents">
                <FluentCard Style="display:flex;flex-direction:column;height: 100%; border: none;" >
                    
                    <NavMenu />
                    <div>
                    @Body
                    </div>
                </FluentCard>
            </div> *@
            <div class="justify-content-center" style="max-width:1200px; min-height:100%;display:contents">

                <FluentCard>
                    <FluentHeader Style="display: flex; width: 100%; padding: 10px; box-sizing: border-box;margin:0;">
                        <h3>FluentUI</h3>
                        <FluentStack Style="justify-content:end">
                            <FluentProfileMenu Initials="@initials"
                                               Style="--fluent-profile-menu-hover: var(--neutral-stroke-focus); padding: 4px;">
                                <HeaderTemplate>
                                    <FluentLabel Typo="@Typography.Header" Color="@Color.Accent">Login</FluentLabel>
                                </HeaderTemplate>
                                <ChildContent>
                                    <div style="width: 250px; height: 80px">
                                        <FluentLabel Typo="@Typography.Header" Style="font-weight:bold">@name</FluentLabel>
                                        <FluentLabel Style="padding-top:7px">@userName</FluentLabel>
                                    </div>
                                </ChildContent>
                                <FooterTemplate>
                                    <FluentStack>
                                        @if (isUserAuthenticated)
                                        {
                                            <form action="Account/Logout" method="post">
                                                <AntiforgeryToken />
                                                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                                <FluentButton Type="ButtonType.Submit" Style="width: 100%;">Logout</FluentButton>
                                            </form>
                                        }
                                    </FluentStack>
                                </FooterTemplate>
                            </FluentProfileMenu>
                        </FluentStack>
                    </FluentHeader>
                    <div style="display:flex">
                        <NavMenu />
                        <div style=" padding-top: 20px; display: flex; flex-direction: column;">
                            @Body
                        </div>
                    </div>
                   
                </FluentCard>
                </div>
        }
        else
        {
            <div>
                <FluentCard Style="padding:0px;">
                    <CascadingAuthenticationState>
                        @Body
                    </CascadingAuthenticationState>
                </FluentCard>
            </div>

        }
        <!-- Main Content Area -->
        
    </div>

</div>
@* <FluentLayout>
    <FluentHeader>
        FLuentUI
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer />
        <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
    </FluentFooter>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div> *@
@code {
    private string? userName;
    private string initials = "NA";
    private string name;
    private string? currentUrl;
    private bool isUserAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        userName = await GetUserName();
        isUserAuthenticated = userName != "Guest";
        SetInitials(userName);
        // Await the task and assign the result to the userName variable

    }
    private async Task<string> GetUserName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Return the name of the user if authenticated, otherwise "Guest"
        return user.Identity?.Name ?? "Guest";
    }
    private void SetInitials(string? userName)
    {
        if (string.IsNullOrWhiteSpace(userName))
        {
            initials = "NA"; // Default initials if no username is available
            return;
        }
        var nameBeforeAt = userName.Split('@')[0];
        name = nameBeforeAt.Replace('.', ' ');
        // Extract the initials from the username
        initials = GenerateInitials(userName);
    }
    private string GenerateInitials(string name)
    {
        // Split the name by non-alphanumeric characters, like space or dots
        var parts = name.Split(new[] { ' ', '.', '@' }, StringSplitOptions.RemoveEmptyEntries);

        // Take the first character of the first two parts if available
        return string.Concat(parts.Take(2).Select(part => part[0])).ToUpperInvariant();
    }
    private bool ShouldDisplayNavMenu()
    {
        var uri = new Uri(NavigationManager.Uri);
        var path = uri.LocalPath;

        var pathsToHide = new List<string> { "/", "/Account/Register", "/Account/ForgotPassword", "/resetpassword", "/email-verification", "/Account/ResendEmailConfirmation" };

        return !pathsToHide.Contains(path);
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
    private int GetMainContentSpan()
    {
        return ShouldDisplayNavMenu() ? 10 : 12; // Adjust the span to ensure the grid is balanced
    }
}