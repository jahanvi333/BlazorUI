@page "/Account/ResendEmailConfirmation"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FLuentUI.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<div class="center">
    <FluentCard Style="width:20vw;">

        <h3 style="color:cornflowerblue;font-weight:700">Resend email confirmation</h3>

<StatusMessage Message="@message" />
<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <FluentValidationSummary class="text-danger" role="alert" />
                    <p>Email</p>
                    <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username"
                                     Required="true" class="form-control" Style="width: 17vw"
                                     Placeholder="name@example.com"></FluentTextField>
@*            <FluentTextField Name="Input.Email" @bind-Value="Input.Email" class="form-control" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%;" /> *@
            <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                   @*  <div style="display: flex; justify-content: center; width: 100%;">
                        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 10vw;">
                            Resend
                        </FluentButton>
                        
                    </div>
                    <FluentAnchor Class="forget-link" Appearance="Appearance.Hypertext"
                                  Href="/">
                        Sign In?
                    </FluentAnchor> *@
                    <FluentGrid Spacing="@Spacing" OnBreakpointEnter="@OnBreakpointEnterHandler" AdaptiveRendering="true" Justify="@Justification" Style="padding: 5px; ">
                        <!-- Set full viewport height -->
                        <!-- First Grid Item with Resend Button -->
                        <FluentGridItem xs="12" sm="6" HiddenWhen="GridItemHidden.SmAndDown">
                            <div style="display: flex; justify-content: center; width: 100%;">
                                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 10vw;">
                                    Resend
                                </FluentButton>
                            </div>
                        </FluentGridItem>

                        <!-- Second Grid Item with Sign In Link at the Bottom -->
                        <FluentGridItem xs="12" sm="6" Style="display: flex; flex-direction: column;">
                            <!-- Ensure grid item takes full height -->
                            <div style="flex-grow: 1;"></div> <!-- Spacer to push the content to the bottom -->
                            <div style="display: flex; justify-content: flex-end;">
                                <FluentAnchor Class="forget-link" Appearance="Appearance.Hypertext" Href="/">
                                    Sign In?
                                </FluentAnchor>
                            </div>
                        </FluentGridItem>
                    </FluentGrid>

        </EditForm>
    </FluentGridItem>
</FluentGrid>
</FluentCard>
</div>
<style>
    .forget-link {
        align-self: end
    }
</style>
@code {
    private string? message;
    JustifyContent Justification = JustifyContent.FlexStart;
    int Spacing = 5;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null)
        {
            message = "Verification email sent. Please check your email.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }
    void OnBreakpointEnterHandler(GridItemSize size)
    {


    }
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
